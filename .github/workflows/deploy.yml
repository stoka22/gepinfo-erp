name: Deploy to DotRoll

on:
  push:
    branches: [ master, main ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      REMOTE_PATH: ${{ secrets.REMOTE_PATH }}   # pl. /home/USER/web-server/web2
      PHP_BIN: ${{ secrets.PHP_BIN }}           # pl. /usr/local/bin/php83 (ha üres: autodetekció a távolin)
      RUN_MIGRATIONS: ${{ secrets.RUN_MIGRATIONS || 'false' }}
      RELEASE: ${{ github.sha }}
      RELEASES_TO_KEEP: "3"

    steps:
      - name: Marker
        shell: bash
        run: | 
         echo "WORKFLOW VERSION: 2025-10-05-6"

      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, intl, pdo_mysql, bcmath, gd
          tools: composer
          coverage: none

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ hashFiles('**/composer.lock') }}

      - name: Prepare Laravel cache dirs
        shell: bash
        run: |
          mkdir -p bootstrap/cache
          mkdir -p storage/framework/{cache,sessions,views}

      - name: Composer install (prod, no scripts)
        shell: bash
        env:
          COMPOSER_NO_INTERACTION: "1"
          COMPOSER_NO_AUDIT: "1"
          COMPOSER_PROCESS_TIMEOUT: "0"
        run: |
          set -euo pipefail
          composer install --no-dev --optimize-autoloader --prefer-dist --no-scripts

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: NPM ci + build
        shell: bash
        run: |
          set -euo pipefail
          npm ci
          npm run build

      - name: Build deploy bundle
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p deploy
          rsync -a --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "node_modules" \
            --exclude "vendor/bin" \
            --exclude "tests" \
            --exclude "storage/framework/cache/data/*" \
            --exclude "storage/framework/sessions/*" \
            --exclude "storage/framework/testing/*" \
            --exclude "storage/logs/*" \
            --exclude ".env" \
            ./ deploy/
          rsync -a vendor/ deploy/vendor/
          if [ -d public/build ]; then
            mkdir -p deploy/public/build
            rsync -a public/build/ deploy/public/build/
          fi

      - name: Setup SSH (decode key, add host)
        shell: bash
        run: |
          set -euo pipefail
          PORT="${SSH_PORT:-22}"
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY_B64 }}" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p "$PORT" "$SSH_HOST" >> ~/.ssh/known_hosts
          ssh -p "$PORT" -o BatchMode=yes "$SSH_USER@$SSH_HOST" "echo 'SSH OK'"

      - name: Ensure shared/.env (safe upload, always overwrite)
        shell: bash
        env:
          ENV_PROD: ${{ secrets.ENV_PROD }}
        run: |
          set -euo pipefail
          PORT="${SSH_PORT:-22}"
          R="$REMOTE_PATH"
          ssh -p "$PORT" "$SSH_USER@$SSH_HOST" "mkdir -p '$R/shared'"
          printf '%s' "$ENV_PROD" | sed 's/\r$//' \
            | ssh -p "$PORT" "$SSH_USER@$SSH_HOST" "install -m 600 /dev/stdin '$R/shared/.env'"

      - name: Upload release (tar over SSH)
        shell: bash
        run: |
          set -euo pipefail
          PORT="${SSH_PORT:-22}"
          R="$REMOTE_PATH"
          REL="$RELEASE"
          ssh -p "$PORT" "$SSH_USER@$SSH_HOST" "mkdir -p '$R/releases/$REL'"
          tar -C deploy -czf - . \
            | ssh -p "$PORT" "$SSH_USER@$SSH_HOST" "tar -C '$R/releases/$REL' -xzf -"

      - name: Activate release & run post-deploy
        shell: bash
        run: |
          set -euo pipefail
          PORT="${SSH_PORT:-22}"
          REM="$REMOTE_PATH"
          REL="$RELEASE"
          KEEP="${RELEASES_TO_KEEP:-3}"
          RUN_MIGRATIONS="${RUN_MIGRATIONS}"

          # átadjuk a változókat a távolira; single-quoted here-doc: nincs lokális expand
          ssh -p "$PORT" "$SSH_USER@$SSH_HOST" \
            REM="$REM" REL="$REL" KEEP="$KEEP" RUN_MIGRATIONS="$RUN_MIGRATIONS" PHP_BIN="${PHP_BIN:-}" \
            'bash -s' <<'EOSSH'
          set -euo pipefail

          # --- környezeti változók a távolin: REM, REL, KEEP, RUN_MIGRATIONS, PHP_BIN ---

          # PHP autodetekció a TÁVOLIN
          if [ -n "${PHP_BIN:-}" ]; then
            PHP="$PHP_BIN"
          else
            PHP="$(command -v php83 || command -v php8.3 || command -v php || echo php)"
          fi
          $PHP -v >/dev/null 2>&1 || { echo "PHP not found on remote"; exit 127; }

          ART="$REM/releases/$REL/artisan"

          # shared struktúra
          mkdir -p "$REM/shared/storage/framework/cache" \
                  "$REM/shared/storage/framework/sessions" \
                  "$REM/shared/storage/framework/views" \
                  "$REM/shared/bootstrap/cache"

          # ABSZOLÚT symlinkek az új release-ben
          rm -rf "$REM/releases/$REL/storage" "$REM/releases/$REL/bootstrap/cache"
          ln -sfn "$REM/shared/storage"         "$REM/releases/$REL/storage"
          ln -sfn "$REM/shared/bootstrap/cache" "$REM/releases/$REL/bootstrap/cache"
          ln -sfn "$REM/shared/.env"            "$REM/releases/$REL/.env"

          # public/storage
          cd "$REM/releases/$REL"
          [ -L public/storage ] || "$PHP" "$ART" storage:link || true

          # jogosultságok
          chmod -R u+rwX,go-rwx "$REM/shared/storage" "$REM/shared/bootstrap" || true

          # cachek (mindig ABSZOLÚT artisan úttal)
          "$PHP" "$ART" optimize:clear || true
          "$PHP" "$ART" config:cache  || true
          "$PHP" "$ART" route:cache   || true
          "$PHP" "$ART" view:cache    || true

          # migráció opcionális
          if [ "${RUN_MIGRATIONS}" = "true" ]; then
            "$PHP" "$ART" migrate --force || true
          fi

          # current felülírása biztosan
          [ -L "$REM/current" ] || rm -rf "$REM/current"
          ln -sfnT "$REM/releases/$REL" "$REM/current"

          # régi release-ek takarítása
          cd "$REM/releases"
          # ha több mint KEEP van, a  (KEEP+1)..∞ kerül törlésre
          COUNT=$(ls -1dt * 2>/dev/null | wc -l | awk '{print $1}')
          if [ "$COUNT" -gt "$KEEP" ]; then
            ls -1dt * | awk "NR>$KEEP" | xargs -r -I{} rm -rf -- "$REM/releases/{}"
          fi

          # vissza az appba; up (ABSZOLÚT artisan)
          "$PHP" "$ART" up || true
          EOSSH

                - name: Done
                  shell: bash
                  run: echo "Deployed release $RELEASE to $SSH_HOST:$REMOTE_PATH"
