name: Deploy to DotRoll

on:
  push:
    branches: [ master, main ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
      PHP_BIN: ${{ secrets.PHP_BIN }}
      RELEASE: ${{ github.sha }}
      RELEASES_TO_KEEP: "3"

    steps:
      - name: Marker
        shell: bash
        run: |
          echo "WORKFLOW VERSION: 2025-10-05-2"

      - uses: actions/checkout@v4

      # PHP + Composer a CI-n
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, intl, pdo_mysql, bcmath, gd
          tools: composer
          coverage: none

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ hashFiles('**/composer.lock') }}

      # (óvatosságból készítünk cache könyvtárakat, bár --no-scripts miatt nem kötelező)
      - name: Prepare Laravel cache dirs
        run: |
          mkdir -p bootstrap/cache
          mkdir -p storage/framework/{cache,sessions,views}

      - name: Composer install (prod, no scripts)
        shell: bash
        env:
          COMPOSER_NO_INTERACTION: "1"
          COMPOSER_NO_AUDIT: "1"
          COMPOSER_PROCESS_TIMEOUT: "0"
        run: |
          set -euo pipefail
          composer install --no-dev --optimize-autoloader --prefer-dist --no-scripts

      # Node build a CI-n
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: NPM ci + build
        run: |
          npm ci
          npm run build

      # Csomag összeállítása
      - name: Build deploy bundle
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p deploy
          rsync -a --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "node_modules" \
            --exclude "vendor/bin" \
            --exclude "tests" \
            --exclude "storage/framework/cache/data/*" \
            --exclude "storage/framework/sessions/*" \
            --exclude "storage/framework/testing/*" \
            --exclude "storage/logs/*" \
            --exclude ".env" \
            ./ deploy/
          # vendor és buildelt assetek is mennek
          rsync -a vendor/ deploy/vendor/
          if [ -d public/build ]; then
            mkdir -p deploy/public/build
            rsync -a public/build/ deploy/public/build/
          fi

      # SSH kulcs és host felvétele
      - name: Setup SSH (decode key, add host)
        shell: bash
        run: |
          set -euo pipefail
          PORT="${SSH_PORT:-22}"
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY_B64 }}" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p "$PORT" "$SSH_HOST" >> ~/.ssh/known_hosts
          ssh -p "$PORT" -o BatchMode=yes "$SSH_USER@$SSH_HOST" "echo 'SSH OK'"

      # shared/.env feltöltése (MINDIG a Secretből)
      - name: Ensure shared/.env (safe upload)
        shell: bash
        env:
          ENV_PROD: ${{ secrets.ENV_PROD }}
        run: |
          set -euo pipefail
          PORT="${SSH_PORT:-22}"
          R="$REMOTE_PATH"
          ssh -p "$PORT" "$SSH_USER@$SSH_HOST" "mkdir -p '$R/shared'"
          # ne expandáljuk a $-jeleket; CRLF eltávolítás
          printf '%s' "$ENV_PROD" | sed 's/\r$//' \
            | ssh -p "$PORT" "$SSH_USER@$SSH_HOST" "install -m 600 /dev/stdin '$R/shared/.env'"

      # Release feltöltése
      - name: Upload release (tar over SSH)
        shell: bash
        run: |
          set -euo pipefail
          PORT="${SSH_PORT:-22}"
          R="$REMOTE_PATH"
          REL="$RELEASE"
          ssh -p "$PORT" "$SSH_USER@$SSH_HOST" "mkdir -p '$R/releases/$REL'"
          tar -C deploy -czf - . \
            | ssh -p "$PORT" "$SSH_USER@$SSH_HOST" "tar -C '$R/releases/$REL' -xzf -"

      # Aktiválás + artisan + takarítás
      - name: Activate release & run post-deploy
        shell: bash
        run: |
          set -euo pipefail
          PORT="${SSH_PORT:-22}"
          SSH="ssh -p $PORT $SSH_USER@$SSH_HOST"
          REM="$REMOTE_PATH"
          REL="$RELEASE"
          KEEP="${RELEASES_TO_KEEP:-3}"
          PRUNE_START=$(( KEEP + 1 ))
          # PHP autodetekció, ha nincs megadva
          PHP="${PHP_BIN:-}"
          if [ -z "$PHP" ]; then
            PHP="$(command -v php83 || command -v php8.3 || command -v php || echo php)"
          fi

          $SSH bash -lc '
            set -euo pipefail
            cd "'"$REM"'"

            # shared struktúra (idempotens)
            mkdir -p "'"$REM"'/shared/storage/framework/"{cache,sessions,views} \
                     "'"$REM"'/shared/bootstrap/cache"

            # release -> shared ABSZOLÚT linkek
            rm -rf "'"$REM"'/releases/'"$REL"'/storage' \
                   "'"$REM"'/releases/'"$REL"'/bootstrap/cache"
            ln -sfn "'"$REM"'/shared/storage"         "'"$REM"'/releases/'"$REL"'/storage"
            ln -sfn "'"$REM"'/shared/bootstrap/cache" "'"$REM"'/releases/'"$REL"'/bootstrap/cache"

            # .env link az új release gyökerébe
            ln -sfn "'"$REM"'/shared/.env" "'"$REM"'/releases/'"$REL"'/.env"

            # public/storage
            cd "'"$REM"'/releases/'"$REL"'"
            [ -L public/storage ] || '"$PHP"' artisan storage:link || true

            # jogosultságok a shared mappákon
            chmod -R u+rwX,go-rwx "'"$REM"'/shared/storage" "'"$REM"'/shared/bootstrap" || true

            # cachek (MINDIG a symlinkek után)
            '"$PHP"' artisan optimize:clear || true
            '"$PHP"' artisan config:cache  || true
            '"$PHP"' artisan route:cache   || true
            '"$PHP"' artisan view:cache    || true
            # migrációt hagyd benne, ha kell; ha nem, vedd ki
            '"$PHP"' artisan migrate --force || true

            # current felülírása biztosan
            [ -L "'"$REM"'/current" ] || rm -rf "'"$REM"'/current"
            ln -sfnT "'"$REM"'/releases/'"$REL"'" "'"$REM"'/current"

            # régi release-ek takarítása
            cd "'"$REM"'"
            ls -1dt releases/* | tail -n +'$PRUNE_START' | xargs -r rm -rf --

            '"$PHP"' artisan up || true
          '

      - name: Done
        shell: bash
        run: echo "Deployed release $RELEASE to $SSH_HOST:$REMOTE_PATH"
